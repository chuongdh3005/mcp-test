const { MCPClient } = require("./mcp-client");
const readline = require("readline");

class BinanceChatbotHost {
  constructor() {
    // Kh·ªüi t·∫°o m√°y kh√°ch MCP ƒë·ªÉ giao ti·∫øp v·ªõi m√°y ph·ª•c v·ª•
    this.mcpClient = new MCPClient("ws://localhost:3000");

    // Kh·ªüi t·∫°o giao di·ªán d√≤ng l·ªánh ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
  }

  async start() {
    console.log("ü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Chatbot Gi√° Coin Binance!");
    console.log('Nh·∫≠p c√¢u h·ªèi v·ªÅ gi√° coin ho·∫∑c g√µ "exit" ƒë·ªÉ tho√°t.\n');

    try {
      // K·∫øt n·ªëi m√°y kh√°ch MCP v·ªõi m√°y ph·ª•c v·ª•
      await this.mcpClient.connect();

      // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p chat
      this.promptUser();
    } catch (error) {
      console.error("L·ªói kh·ªüi ƒë·ªông chatbot:", error.message);
      this.rl.close();
    }
  }

  promptUser() {
    this.rl.question("B·∫°n: ", async (query) => {
      if (query.toLowerCase() === "exit") {
        console.log("T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i.");
        this.rl.close();
        this.mcpClient.disconnect();
        return;
      }

      try {
        // X·ª≠ l√Ω c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
        const response = await this.processUserQuery(query);
        console.log(`Chatbot: ${response}\n`);
      } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:", error.message);
        console.log(
          "Chatbot: Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.\n"
        );
      }

      // Ti·∫øp t·ª•c v√≤ng l·∫∑p
      this.promptUser();
    });
  }

  async processUserQuery(query) {
    // Ph√¢n t√≠ch c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh xem h·ªç ƒëang h·ªèi v·ªÅ coin n√†o
    const coinSymbol = this.extractCoinSymbol(query);

    if (!coinSymbol) {
      return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ coin n√†o. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t√™n coin c·ª• th·ªÉ (v√≠ d·ª•: Bitcoin, ETH, BNB, v.v.)";
    }

    try {
      // 1. L·∫•y d·ªØ li·ªáu gi√° coin t·ª´ m√°y ph·ª•c v·ª• MCP th√¥ng qua c√¥ng c·ª•
      const priceData = await this.mcpClient.callTool("get_coin_price", {
        symbol: coinSymbol,
      });

      // 2. T·∫°o tin nh·∫Øn v·ªõi ng·ªØ c·∫£nh gi√° coin
      const messages = [
        {
          role: "user",
          content: {
            type: "text",
            text: query,
          },
        },
      ];

      // 3. G·ª≠i y√™u c·∫ßu t·∫°o ph·∫£n h·ªìi t·ª´ LLM v·ªõi d·ªØ li·ªáu ng·ªØ c·∫£nh
      const llmResponse = await this.mcpClient.createMessage(messages, {
        systemPrompt: `B·∫°n l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ ti·ªÅn ƒëi·ªán t·ª≠. 
        Th√¥ng tin m·ªõi nh·∫•t v·ªÅ ${coinSymbol}: ${JSON.stringify(priceData)}. 
        Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† th√¢n thi·ªán. Lu√¥n s·ª≠ d·ª•ng d·ªØ li·ªáu gi√° m·ªõi nh·∫•t.`,
        modelPreferences: {
          hints: [{ name: "gpt-4" }],
          intelligencePriority: 0.8,
        },
        maxTokens: 200,
      });

      return llmResponse.content.text;
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:", error);
      return `Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin gi√° cho ${coinSymbol} l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.`;
    }
  }

  extractCoinSymbol(query) {
    // Logic ƒë∆°n gi·∫£n ƒë·ªÉ tr√≠ch xu·∫•t symbol coin t·ª´ c√¢u h·ªèi
    const lowercaseQuery = query.toLowerCase();

    // Mapping t·ª´ t√™n coin ph·ªï bi·∫øn sang symbol
    const coinMapping = {
      bitcoin: "BTC",
      btc: "BTC",
      ethereum: "ETH",
      eth: "ETH",
      binance: "BNB",
      bnb: "BNB",
      solana: "SOL",
      sol: "SOL",
      xrp: "XRP",
      cardano: "ADA",
      ada: "ADA",
      dogecoin: "DOGE",
      doge: "DOGE",
    };

    for (const [name, symbol] of Object.entries(coinMapping)) {
      if (lowercaseQuery.includes(name)) {
        return symbol;
      }
    }

    return null;
  }
}

// Kh·ªüi ch·∫°y chatbot
const chatbot = new BinanceChatbotHost();
chatbot.start();
